// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { EntraIdAccessTokenConstants } from "../common/constants.js";
import { coreLogger } from "../common/logger.js";
import { EntraIdAccessToken } from "../common/entraIdAccessToken.js";
import { state } from "../common/state.js";
class PlaywrightServiceEntra {
    _entraIdAccessTokenRotationInterval;
    _entraIdAccessToken;
    static getInstance = () => {
        if (!state.playwrightServiceEntra) {
            state.playwrightServiceEntra = new PlaywrightServiceEntra();
        }
        return state.playwrightServiceEntra;
    };
    set entraIdAccessToken(credential) {
        this._entraIdAccessToken = new EntraIdAccessToken(credential);
    }
    constructor() {
        this._entraIdAccessToken = new EntraIdAccessToken();
    }
    globalSetup = async () => {
        coreLogger.info("Entra id access token setup start");
        await this._entraIdAccessToken.fetchEntraIdAccessToken();
        this.entraIdGlobalSetupRotationHandler();
    };
    globalTeardown = () => {
        coreLogger.info("Entra id access token teardown start");
        if (this._entraIdAccessTokenRotationInterval) {
            clearInterval(this._entraIdAccessTokenRotationInterval);
            coreLogger.info("Entra id access token rotation interval cleared");
        }
    };
    entraIdGlobalSetupRotationHandler = () => {
        this._entraIdAccessTokenRotationInterval = setInterval(this.entraIdAccessTokenRotation, EntraIdAccessTokenConstants.ROTATION_INTERVAL_PERIOD_IN_MINUTES * 60 * 1000);
        coreLogger.info("Entra id access token rotation handler setup done");
    };
    entraIdAccessTokenRotation = async () => {
        coreLogger.info("Entra id access token rotation handler");
        try {
            if (this._entraIdAccessToken.doesEntraIdAccessTokenNeedRotation()) {
                await this._entraIdAccessToken.fetchEntraIdAccessToken();
            }
        }
        catch (err) {
            coreLogger.error(err); // log error and continue if it's an intermittent issue (optimistic approach)
        }
    };
}
const instance = PlaywrightServiceEntra.getInstance();
export default instance;
//# sourceMappingURL=playwrightServiceEntra.js.map