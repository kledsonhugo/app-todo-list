{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/common/types.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ConnectOptions } from \"@playwright/test\";\nimport type { ServiceAuth, ServiceOS, SDKLanguage } from \"./constants.js\";\nimport type { TokenCredential } from \"@azure/identity\";\nimport { CIInfo } from \"../utils/cIInfoProvider.js\";\n\n// Public APIs\n\n/**\n * @public\n *\n * Endpoint options for the service.\n */\nexport type EndpointOptions = {\n  /**\n   * @public\n   *\n   * A browser websocket endpoint to connect to.\n   */\n  wsEndpoint: string;\n};\n\n/**\n * @public\n *\n * Browser connect options for the service. This includes endpoint options and connect options.\n *\n * @example\n * ```\n * import playwright, { test, expect, BrowserType } from \"@playwright/test\";\n * import { getConnectOptions, BrowserConnectOptions } from \"@azure/playwright\";\n *\n * test(\"has title\", async ({ browserName }) => {\n *  const { wsEndpoint, options } : BrowserConnectOptions = await getConnectOptions();\n *  const browser = await (playwright[browserName] as BrowserType).connect(wsEndpoint, options);\n *  const context = await browser.newContext();\n *  const page = await context.newPage();\n *\n *  await page.goto(\"https://playwright.dev/\");\n *  await expect(page).toHaveTitle(/Playwright/);\n *\n *  await page.close();\n *  await context.close();\n *  await browser.close();\n * });\n * ```\n */\nexport type BrowserConnectOptions = EndpointOptions & {\n  options: ConnectOptions;\n};\n\n/**\n * @public\n *\n * Additional options for the service.\n */\nexport type PlaywrightServiceAdditionalOptions = {\n  /**\n   * @public\n   *\n   * Authentication types supported by Azure Playwright.\n   *\n   * @defaultValue  `ENTRA_ID`\n   */\n  serviceAuthType?: AuthenticationType;\n\n  /**\n   * @public\n   *\n   * Operating system types supported by Azure Playwright.\n   *\n   * @defaultValue  `linux`\n   */\n  os?: OsType;\n\n  /**\n   * @public\n   *\n   * Run id for the test run.\n   *\n   * @defaultValue `current datetime as ISO string`\n   */\n  runId?: string;\n\n  /**\n   * @public\n   *\n   * Maximum time in milliseconds to wait for the connection to be established.\n   *\n   * @defaultValue `30000`\n   */\n  connectTimeout?: number;\n\n  /**\n   * @public\n   *\n   * Slows down Playwright operations by the specified amount of milliseconds.\n   *\n   * @defaultValue `0`\n   */\n  slowMo?: number;\n\n  /**\n   * @public\n   *\n   * Exposes network available on the connecting client to the browser being connected to.\n   *\n   * @defaultValue `<loopback>`\n   */\n  exposeNetwork?: string;\n\n  /**\n   * @public\n   *\n   * Custom token credential for Entra ID authentication. Learn more at {@link https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/using-azure-identity.md | Using Azure Identity}.\n   *\n   * @defaultValue `DefaultAzureCredential`\n   */\n  credential?: TokenCredential;\n  /**\n   * @public\n   *\n   * Run name for the test run.\n   *\n   * @defaultValue `guid`\n   */\n  runName?: string;\n\n  /**\n   * @public\n   *\n   * API Version\n   *\n   * @defaultValue `2025-09-01`\n   */\n  apiVersion?: \"2025-09-01\";\n};\n\n/**\n * @public\n *\n * OS Types supported by Azure Playwright.\n */\nexport type OsType = (typeof ServiceOS)[keyof typeof ServiceOS];\n\n/**\n * @public\n *\n * Authentication types supported by Azure Playwright.\n */\nexport type AuthenticationType = (typeof ServiceAuth)[keyof typeof ServiceAuth];\n\n// Internal APIs\n\nexport type JwtPayload = {\n  iss?: string;\n  sub?: string;\n  aud?: string[] | string;\n  exp?: number;\n  nbf?: number;\n  iat?: number;\n  jti?: string;\n};\n\nexport type AccessTokenClaims = JwtPayload & {\n  pwid?: string;\n};\n\nexport type VersionInfo = {\n  major: number;\n  minor: number;\n  patch: number;\n};\n\nexport type PackageManager = {\n  runCommand: (command: string, args: string) => string;\n  getVersionFromStdout: (stdout: string) => string;\n};\n\nexport type RunConfig = {\n  framework?: RunFramework;\n  sdkLanguage?: (typeof SDKLanguage)[keyof typeof SDKLanguage];\n  maxWorkers?: number;\n};\n\nexport type RunFramework = {\n  name?: string;\n  version?: string;\n  runnerName?: string;\n};\n\nexport type TestRunCreatePayload = {\n  displayName: string;\n  config?: RunConfig;\n  ciConfig?: CIInfo;\n};\n"]}