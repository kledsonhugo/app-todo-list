"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaywrightServiceConfig = void 0;
const constants_js_1 = require("./constants.js");
const utils_js_1 = require("../utils/utils.js");
const cIInfoProvider_js_1 = require("../utils/cIInfoProvider.js");
const state_js_1 = require("./state.js");
const messages_js_1 = require("./messages.js");
class PlaywrightServiceConfig {
    serviceOs;
    runId;
    connectTimeout;
    slowMo;
    exposeNetwork;
    runName;
    apiVersion;
    _serviceAuthType = constants_js_1.ServiceAuth.ENTRA_ID;
    constructor() {
        this.serviceOs = (process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_OS] ||
            constants_js_1.DefaultConnectOptionsConstants.DEFAULT_SERVICE_OS);
        this.runName = process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_RUN_NAME] || "";
        this.runId = process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_RUN_ID] || "";
        this.connectTimeout = constants_js_1.DefaultConnectOptionsConstants.DEFAULT_TIMEOUT;
        this.slowMo = constants_js_1.DefaultConnectOptionsConstants.DEFAULT_SLOW_MO;
        this.exposeNetwork = constants_js_1.DefaultConnectOptionsConstants.DEFAULT_EXPOSE_NETWORK;
        this.apiVersion =
            process.env[constants_js_1.InternalEnvironmentVariables.MPT_API_VERSION] || constants_js_1.Constants.LatestAPIVersion;
    }
    static get instance() {
        if (!state_js_1.state.playwrightServiceConfig) {
            state_js_1.state.playwrightServiceConfig = new PlaywrightServiceConfig();
        }
        return state_js_1.state.playwrightServiceConfig;
    }
    get serviceAuthType() {
        return this._serviceAuthType;
    }
    set serviceAuthType(value) {
        this._serviceAuthType = value;
    }
    async initialize() {
        if (!this.runName) {
            const ciConfigInfo = cIInfoProvider_js_1.CIInfoProvider.getCIInfo();
            this.runName = await (0, utils_js_1.getRunName)(ciConfigInfo);
        }
    }
    validateOptions = (options) => {
        if (!options)
            return;
        const isUsingServiceConfig = process.env[constants_js_1.InternalEnvironmentVariables.USING_SERVICE_CONFIG] === "true";
        if (isUsingServiceConfig) {
            if (options.serviceAuthType || options.runId || options.runName) {
                const errorMessage = messages_js_1.ServiceErrorMessageConstants.INVALID_PARAM_WITH_SERVICE_CONFIG.message;
                throw new Error(errorMessage);
            }
            return;
        }
    };
    setOptions = (options, isGetConnectOptions = false) => {
        if (isGetConnectOptions) {
            this.validateOptions(options);
        }
        if (options?.exposeNetwork) {
            this.exposeNetwork = options.exposeNetwork;
        }
        if (options?.apiVersion) {
            if (!process.env[constants_js_1.InternalEnvironmentVariables.MPT_API_VERSION]) {
                process.env[constants_js_1.InternalEnvironmentVariables.MPT_API_VERSION] = options.apiVersion;
            }
            this.apiVersion = options.apiVersion;
        }
        if (!process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_RUN_ID]) {
            if (options?.runId) {
                (0, utils_js_1.ValidateRunID)(options.runId);
                this.runId = options.runId;
                process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_RUN_ID] = this.runId;
            }
            else {
                this.runId = (0, utils_js_1.getAndSetRunId)();
            }
        }
        if (!process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_RUN_NAME] && options?.runName) {
            this.runName = options.runName;
            process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_RUN_NAME] = this.runName;
        }
        if (options?.os) {
            this.serviceOs = options.os;
            process.env[constants_js_1.InternalEnvironmentVariables.MPT_SERVICE_OS] = this.serviceOs;
        }
        if (options?.slowMo) {
            this.slowMo = options.slowMo;
        }
        if (options?.connectTimeout) {
            this.connectTimeout = options.connectTimeout;
        }
    };
}
exports.PlaywrightServiceConfig = PlaywrightServiceConfig;
//# sourceMappingURL=playwrightServiceConfig.js.map