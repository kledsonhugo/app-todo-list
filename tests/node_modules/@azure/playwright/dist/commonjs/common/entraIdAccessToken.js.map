{"version":3,"file":"entraIdAccessToken.js","sourceRoot":"","sources":["../../../src/common/entraIdAccessToken.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { coreLogger } from \"./logger.js\";\nimport {\n  EntraIdAccessTokenConstants,\n  InternalEnvironmentVariables,\n  ServiceEnvironmentVariable,\n} from \"./constants.js\";\nimport type { AccessTokenClaims } from \"./types.js\";\nimport { parseJwt } from \"../utils/parseJwt.js\";\nimport { ServiceErrorMessageConstants } from \"./messages.js\";\n\nexport class EntraIdAccessToken {\n  public token?: string;\n  private _expiryTimestamp?: number; // in milliseconds\n  private _credential?: TokenCredential;\n  private _noOpFlag = false;\n\n  constructor(credential?: TokenCredential) {\n    this._credential = credential;\n    if (!this._credential) {\n      this._noOpFlag = true;\n      return;\n    }\n    this.setEntraIdAccessTokenFromEnvironment();\n  }\n\n  public fetchEntraIdAccessToken = async (): Promise<void> => {\n    if (this._noOpFlag) {\n      throw new Error(ServiceErrorMessageConstants.NO_CRED_ENTRA_AUTH_ERROR.message);\n    }\n    try {\n      coreLogger.info(\"Fetching entra id access token\");\n      const accessToken = await this._credential!.getToken(EntraIdAccessTokenConstants.SCOPE);\n      if (!accessToken) {\n        throw new Error(\"Entra id access token is null\");\n      }\n      if (accessToken.token === this.token) {\n        // azure identity library can fetch the same token again from cache. 10 mins before expiry, it allows token refresh\n        coreLogger.info(\"Cached access token is returned, will be retried again.\");\n        return;\n      }\n      this.token = accessToken.token;\n      this._expiryTimestamp = accessToken.expiresOnTimestamp;\n      process.env[ServiceEnvironmentVariable.PLAYWRIGHT_SERVICE_ACCESS_TOKEN] = this.token!;\n      coreLogger.info(\"Entra id access token fetched and set in environment variable\");\n      coreLogger.info(\n        \"Entra id access token expiry:\",\n        new Date(this._expiryTimestamp!).toISOString(),\n      );\n      return;\n    } catch (err) {\n      coreLogger.error(err);\n      process.env[InternalEnvironmentVariables.MPT_SETUP_FATAL_ERROR] = \"true\";\n      throw new Error(ServiceErrorMessageConstants.NO_AUTH_ERROR.message);\n    }\n  };\n\n  public doesEntraIdAccessTokenNeedRotation(): boolean {\n    if (this._noOpFlag) {\n      throw new Error(ServiceErrorMessageConstants.NO_CRED_ENTRA_AUTH_ERROR.message);\n    }\n    if (!this.token) {\n      coreLogger.info(\"Entra id access token not found, needs rotation\");\n      return true;\n    }\n    const lifetimeLeft = this._expiryTimestamp! - new Date().getTime();\n    const doesEntraTokenRequireRotation =\n      lifetimeLeft <\n      EntraIdAccessTokenConstants.LIFETIME_LEFT_THRESHOLD_IN_MINUTES_FOR_ROTATION * 60 * 1000;\n    coreLogger.info(\n      \"Entra id access token requires rotation:\",\n      doesEntraTokenRequireRotation ? \"Yes\" : \"No\",\n    );\n    return doesEntraTokenRequireRotation;\n  }\n\n  private setEntraIdAccessTokenFromEnvironment = (): void => {\n    try {\n      const token = process.env[ServiceEnvironmentVariable.PLAYWRIGHT_SERVICE_ACCESS_TOKEN];\n      if (!token) {\n        return;\n      }\n      const claims = parseJwt<Partial<AccessTokenClaims>>(token);\n      if (claims.pwid) {\n        return;\n      } // mpt PAT\n      const expiry = new Date(claims.exp! * 1000);\n      this.token = token;\n      this._expiryTimestamp = expiry.getTime();\n    } catch (_) {\n      return;\n    }\n  };\n}\n\nexport function createEntraIdAccessToken(credential?: TokenCredential): EntraIdAccessToken {\n  return new EntraIdAccessToken(credential);\n}\n"]}