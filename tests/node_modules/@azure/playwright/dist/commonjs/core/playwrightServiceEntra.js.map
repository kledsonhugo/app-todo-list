{"version":3,"file":"playwrightServiceEntra.js","sourceRoot":"","sources":["../../../src/core/playwrightServiceEntra.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,yDAAqE;AACrE,mDAAiD;AACjD,2EAAqE;AACrE,iDAA2C;AAG3C,MAAM,sBAAsB;IAClB,mCAAmC,CAAkB;IACrD,mBAAmB,CAAqB;IAEhD,MAAM,CAAC,WAAW,GAAG,GAA2B,EAAE;QAChD,IAAI,CAAC,gBAAK,CAAC,sBAAsB,EAAE,CAAC;YAClC,gBAAK,CAAC,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;QAC9D,CAAC;QACD,OAAO,gBAAK,CAAC,sBAAsB,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,kBAAkB,CAAC,UAA2B;QAChD,IAAI,CAAC,mBAAmB,GAAG,IAAI,0CAAkB,CAAC,UAAU,CAAC,CAAC;IAChE,CAAC;IAED;QACE,IAAI,CAAC,mBAAmB,GAAG,IAAI,0CAAkB,EAAE,CAAC;IACtD,CAAC;IAEM,WAAW,GAAG,KAAK,IAAmB,EAAE;QAC7C,sBAAU,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QACrD,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC;QACzD,IAAI,CAAC,iCAAiC,EAAE,CAAC;IAC3C,CAAC,CAAC;IAEK,cAAc,GAAG,GAAS,EAAE;QACjC,sBAAU,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QACxD,IAAI,IAAI,CAAC,mCAAmC,EAAE,CAAC;YAC7C,aAAa,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YACxD,sBAAU,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAC;IAEM,iCAAiC,GAAG,GAAS,EAAE;QACrD,IAAI,CAAC,mCAAmC,GAAG,WAAW,CACpD,IAAI,CAAC,0BAA0B,EAC/B,0CAA2B,CAAC,mCAAmC,GAAG,EAAE,GAAG,IAAI,CAC5E,CAAC;QACF,sBAAU,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;IACvE,CAAC,CAAC;IAEM,0BAA0B,GAAG,KAAK,IAAmB,EAAE;QAC7D,sBAAU,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QAC1D,IAAI,CAAC;YACH,IAAI,IAAI,CAAC,mBAAmB,CAAC,kCAAkC,EAAE,EAAE,CAAC;gBAClE,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC;YAC3D,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,sBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,6EAA6E;QACtG,CAAC;IACH,CAAC,CAAC;;AAGJ,MAAM,QAAQ,GAAG,sBAAsB,CAAC,WAAW,EAAE,CAAC;AACtD,kBAAe,QAAQ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { EntraIdAccessTokenConstants } from \"../common/constants.js\";\nimport { coreLogger } from \"../common/logger.js\";\nimport { EntraIdAccessToken } from \"../common/entraIdAccessToken.js\";\nimport { state } from \"../common/state.js\";\nimport type { TokenCredential } from \"@azure/identity\";\n\nclass PlaywrightServiceEntra {\n  private _entraIdAccessTokenRotationInterval?: NodeJS.Timeout;\n  private _entraIdAccessToken: EntraIdAccessToken;\n\n  static getInstance = (): PlaywrightServiceEntra => {\n    if (!state.playwrightServiceEntra) {\n      state.playwrightServiceEntra = new PlaywrightServiceEntra();\n    }\n    return state.playwrightServiceEntra;\n  };\n\n  set entraIdAccessToken(credential: TokenCredential) {\n    this._entraIdAccessToken = new EntraIdAccessToken(credential);\n  }\n\n  constructor() {\n    this._entraIdAccessToken = new EntraIdAccessToken();\n  }\n\n  public globalSetup = async (): Promise<void> => {\n    coreLogger.info(\"Entra id access token setup start\");\n    await this._entraIdAccessToken.fetchEntraIdAccessToken();\n    this.entraIdGlobalSetupRotationHandler();\n  };\n\n  public globalTeardown = (): void => {\n    coreLogger.info(\"Entra id access token teardown start\");\n    if (this._entraIdAccessTokenRotationInterval) {\n      clearInterval(this._entraIdAccessTokenRotationInterval);\n      coreLogger.info(\"Entra id access token rotation interval cleared\");\n    }\n  };\n\n  private entraIdGlobalSetupRotationHandler = (): void => {\n    this._entraIdAccessTokenRotationInterval = setInterval(\n      this.entraIdAccessTokenRotation,\n      EntraIdAccessTokenConstants.ROTATION_INTERVAL_PERIOD_IN_MINUTES * 60 * 1000,\n    );\n    coreLogger.info(\"Entra id access token rotation handler setup done\");\n  };\n\n  private entraIdAccessTokenRotation = async (): Promise<void> => {\n    coreLogger.info(\"Entra id access token rotation handler\");\n    try {\n      if (this._entraIdAccessToken.doesEntraIdAccessTokenNeedRotation()) {\n        await this._entraIdAccessToken.fetchEntraIdAccessToken();\n      }\n    } catch (err) {\n      coreLogger.error(err); // log error and continue if it's an intermittent issue (optimistic approach)\n    }\n  };\n}\n\nconst instance = PlaywrightServiceEntra.getInstance();\nexport default instance;\n"]}