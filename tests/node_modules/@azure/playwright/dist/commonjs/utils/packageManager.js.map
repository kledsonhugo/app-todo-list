{"version":3,"file":"packageManager.js","sourceRoot":"","sources":["../../../src/utils/packageManager.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,MAAa,GAAG;IACd,UAAU,GAAG,CAAC,OAAe,EAAE,IAAY,EAAU,EAAE;QACrD,OAAO,OAAO,OAAO,IAAI,IAAI,EAAE,CAAC;IAClC,CAAC,CAAC;IACF,oBAAoB,GAAG,CAAC,MAAc,EAAU,EAAE;QAChD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;QAChF,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAC9C,CAAC,CAAC;CACH;AARD,kBAQC;AAED,MAAa,IAAI;IACf,UAAU,GAAG,CAAC,OAAe,EAAE,IAAY,EAAU,EAAE;QACrD,OAAO,QAAQ,OAAO,IAAI,IAAI,EAAE,CAAC;IACnC,CAAC,CAAC;IACF,oBAAoB,GAAG,CAAC,MAAc,EAAU,EAAE;QAChD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;QAChF,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAC9C,CAAC,CAAC;CACH;AARD,oBAQC;AAED,MAAa,IAAI;IACf,UAAU,GAAG,CAAC,OAAe,EAAE,IAAY,EAAU,EAAE;QACrD,OAAO,QAAQ,OAAO,IAAI,IAAI,EAAE,CAAC;IACnC,CAAC,CAAC;IACF,oBAAoB,GAAG,CAAC,MAAc,EAAU,EAAE;QAChD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;QAChF,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAC9C,CAAC,CAAC;CACH;AARD,oBAQC;AAED,8HAA8H;AACvH,MAAM,iBAAiB,GAAG,GAAmB,EAAE;IACpD,IAAI,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,EAAE,CAAC;QACzC,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACvD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,IAAI,IAAI,EAAE,CAAC;QAClD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,IAAI,IAAI,EAAE,CAAC;IACpD,CAAC;IACD,OAAO,IAAI,GAAG,EAAE,CAAC;AACnB,CAAC,CAAC;AAPW,QAAA,iBAAiB,qBAO5B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PackageManager } from \"../common/types.js\";\n\nexport class NPM implements PackageManager {\n  runCommand = (command: string, args: string): string => {\n    return `npx ${command} ${args}`;\n  };\n  getVersionFromStdout = (stdout: string): string => {\n    const match = stdout.match(/Version\\s(\\d+\\.\\d+\\.\\d+(-\\w+-\\d{4}-\\d{2}-\\d{2})?)/);\n    return match ? match[1] : \"Unknown version\";\n  };\n}\n\nexport class PNPM implements PackageManager {\n  runCommand = (command: string, args: string): string => {\n    return `pnpm ${command} ${args}`;\n  };\n  getVersionFromStdout = (stdout: string): string => {\n    const match = stdout.match(/Version\\s(\\d+\\.\\d+\\.\\d+(-\\w+-\\d{4}-\\d{2}-\\d{2})?)/);\n    return match ? match[1] : \"Unknown version\";\n  };\n}\n\nexport class Yarn implements PackageManager {\n  runCommand = (command: string, args: string): string => {\n    return `yarn ${command} ${args}`;\n  };\n  getVersionFromStdout = (stdout: string): string => {\n    const match = stdout.match(/Version\\s(\\d+\\.\\d+\\.\\d+(-\\w+-\\d{4}-\\d{2}-\\d{2})?)/);\n    return match ? match[1] : \"Unknown version\";\n  };\n}\n\n// https://stackoverflow.com/questions/68133683/is-there-a-cross-platform-way-to-get-the-name-of-the-parent-process-in-node-js\nexport const getPackageManager = (): PackageManager => {\n  if (process.env[\"npm_config_user_agent\"]) {\n    const userAgent = process.env[\"npm_config_user_agent\"];\n    if (userAgent.includes(\"yarn\")) return new Yarn();\n    if (userAgent.includes(\"pnpm\")) return new PNPM();\n  }\n  return new NPM();\n};\n"]}