{"version":3,"file":"playwrightServiceConfig.js","sourceRoot":"","sources":["../../../src/common/playwrightServiceConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  Constants,\n  DefaultConnectOptionsConstants,\n  InternalEnvironmentVariables,\n  ServiceAuth,\n} from \"./constants.js\";\nimport type { PlaywrightServiceAdditionalOptions, OsType } from \"./types.js\";\nimport { getAndSetRunId, getRunName, ValidateRunID } from \"../utils/utils.js\";\nimport { CIInfoProvider } from \"../utils/cIInfoProvider.js\";\nimport { state } from \"./state.js\";\nimport { ServiceErrorMessageConstants } from \"./messages.js\";\n\nclass PlaywrightServiceConfig {\n  public serviceOs: OsType;\n  public runId: string;\n  public connectTimeout: number;\n  public slowMo: number;\n  public exposeNetwork: string;\n  public runName: string;\n  public apiVersion: string;\n  private _serviceAuthType: string = ServiceAuth.ENTRA_ID;\n\n  constructor() {\n    this.serviceOs = (process.env[InternalEnvironmentVariables.MPT_SERVICE_OS] ||\n      DefaultConnectOptionsConstants.DEFAULT_SERVICE_OS) as OsType;\n    this.runName = process.env[InternalEnvironmentVariables.MPT_SERVICE_RUN_NAME] || \"\";\n    this.runId = process.env[InternalEnvironmentVariables.MPT_SERVICE_RUN_ID] || \"\";\n    this.connectTimeout = DefaultConnectOptionsConstants.DEFAULT_TIMEOUT;\n    this.slowMo = DefaultConnectOptionsConstants.DEFAULT_SLOW_MO;\n    this.exposeNetwork = DefaultConnectOptionsConstants.DEFAULT_EXPOSE_NETWORK;\n    this.apiVersion =\n      process.env[InternalEnvironmentVariables.MPT_API_VERSION] || Constants.LatestAPIVersion;\n  }\n\n  public static get instance(): PlaywrightServiceConfig {\n    if (!state.playwrightServiceConfig) {\n      state.playwrightServiceConfig = new PlaywrightServiceConfig();\n    }\n    return state.playwrightServiceConfig;\n  }\n\n  public get serviceAuthType(): string {\n    return this._serviceAuthType;\n  }\n\n  public set serviceAuthType(value: string) {\n    this._serviceAuthType = value;\n  }\n\n  public async initialize(): Promise<void> {\n    if (!this.runName) {\n      const ciConfigInfo = CIInfoProvider.getCIInfo();\n      this.runName = await getRunName(ciConfigInfo);\n    }\n  }\n\n  validateOptions = (options?: PlaywrightServiceAdditionalOptions): void => {\n    if (!options) return;\n\n    const isUsingServiceConfig =\n      process.env[InternalEnvironmentVariables.USING_SERVICE_CONFIG] === \"true\";\n    if (isUsingServiceConfig) {\n      if (options.serviceAuthType || options.runId || options.runName) {\n        const errorMessage = ServiceErrorMessageConstants.INVALID_PARAM_WITH_SERVICE_CONFIG.message;\n        throw new Error(errorMessage);\n      }\n      return;\n    }\n  };\n\n  setOptions = (\n    options?: PlaywrightServiceAdditionalOptions,\n    isGetConnectOptions: boolean = false,\n  ): void => {\n    if (isGetConnectOptions) {\n      this.validateOptions(options);\n    }\n\n    if (options?.exposeNetwork) {\n      this.exposeNetwork = options.exposeNetwork;\n    }\n    if (options?.apiVersion) {\n      if (!process.env[InternalEnvironmentVariables.MPT_API_VERSION]) {\n        process.env[InternalEnvironmentVariables.MPT_API_VERSION] = options.apiVersion;\n      }\n      this.apiVersion = options.apiVersion;\n    }\n    if (!process.env[InternalEnvironmentVariables.MPT_SERVICE_RUN_ID]) {\n      if (options?.runId) {\n        ValidateRunID(options.runId);\n        this.runId = options.runId;\n        process.env[InternalEnvironmentVariables.MPT_SERVICE_RUN_ID] = this.runId;\n      } else {\n        this.runId = getAndSetRunId();\n      }\n    }\n    if (!process.env[InternalEnvironmentVariables.MPT_SERVICE_RUN_NAME] && options?.runName) {\n      this.runName = options.runName;\n      process.env[InternalEnvironmentVariables.MPT_SERVICE_RUN_NAME] = this.runName;\n    }\n    if (options?.os) {\n      this.serviceOs = options.os;\n      process.env[InternalEnvironmentVariables.MPT_SERVICE_OS] = this.serviceOs;\n    }\n    if (options?.slowMo) {\n      this.slowMo = options.slowMo;\n    }\n    if (options?.connectTimeout) {\n      this.connectTimeout = options.connectTimeout;\n    }\n  };\n}\n\nexport { PlaywrightServiceConfig };\n"]}