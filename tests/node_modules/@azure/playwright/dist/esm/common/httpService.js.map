{"version":3,"file":"httpService.js","sourceRoot":"","sources":["../../../src/common/httpService.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAEpC,OAAO,EACL,uBAAuB,EACvB,iBAAiB,EACjB,qBAAqB,EACrB,yBAAyB,GAC1B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,MAAM,OAAO,WAAW;IACf,KAAK,CAAC,OAAO,CAClB,MAAmB,EACnB,GAAW,EACX,IAAgB,EAChB,KAAa,EACb,WAAmB,EACnB,aAAqB;QAErB,MAAM,QAAQ,GAAG,yBAAyB,CAAC;YACzC,cAAc,EAAE;gBACd,MAAM,EAAE,UAAU,CAAC,IAAI;aACxB;YACD,YAAY,EAAE,EAAE;SACjB,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,uBAAuB,EAAE,CAAC;QAC7C,MAAM,OAAO,GAAG,qBAAqB,CAAC;YACpC,GAAG;YACH,MAAM;YACN,OAAO,EAAE,iBAAiB,CAAC;gBACzB,cAAc,EAAE,WAAW;gBAC3B,MAAM,EAAE,KAAK;gBACb,aAAa,EAAE,UAAU,KAAK,EAAE;gBAChC,wBAAwB,EAAE,GAAG,UAAU,EAAE,EAAE;gBAC3C,kBAAkB,EAAE,aAAa;aAClC,CAAC;YACF,OAAO,EAAE,SAAS,CAAC,iBAAiB;SACrC,CAAC,CAAC;QAEH,IAAI,IAAI,EAAE,CAAC;YACT,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACtB,CAAC;QACD,OAAO,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { randomUUID } from \"crypto\";\nimport type { PipelineResponse, HttpMethods } from \"@azure/core-rest-pipeline\";\nimport {\n  createDefaultHttpClient,\n  createHttpHeaders,\n  createPipelineRequest,\n  createPipelineFromOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { coreLogger } from \"../common/logger.js\";\nimport { Constants } from \"./constants.js\";\n\nexport class HttpService {\n  public async callAPI(\n    method: HttpMethods,\n    url: string,\n    data: any | null,\n    token: string,\n    contentType: string,\n    correlationId: string,\n  ): Promise<PipelineResponse> {\n    const pipeline = createPipelineFromOptions({\n      loggingOptions: {\n        logger: coreLogger.info,\n      },\n      retryOptions: {},\n    });\n\n    const httpClient = createDefaultHttpClient();\n    const request = createPipelineRequest({\n      url,\n      method,\n      headers: createHttpHeaders({\n        \"Content-Type\": contentType,\n        Accept: \"*/*\",\n        Authorization: `Bearer ${token}`,\n        \"x-ms-client-request-id\": `${randomUUID()}`,\n        \"x-correlation-id\": correlationId,\n      }),\n      timeout: Constants.HTTP_CALL_TIMEOUT,\n    });\n\n    if (data) {\n      request.body = data;\n    }\n    return pipeline.sendRequest(httpClient, request);\n  }\n}\n"]}