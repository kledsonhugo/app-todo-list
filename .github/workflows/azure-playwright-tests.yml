name: Azure Playwright Workspaces - E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for Azure authentication via OIDC
permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  azure-playwright-tests:
    name: üé≠ Azure Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîê Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # Otimiza√ß√£o: S√≥ Azure CLI, sem PowerShell para Playwright
        enable-AzPSSession: false
        # Otimiza√ß√£o: Permitir comandos paralelos
        allow-no-subscriptions: false

    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json

    - name: üì¶ Restore .NET dependencies
      run: dotnet restore app-todo-list.sln

    - name: üèóÔ∏è Build .NET application
      run: dotnet build app-todo-list.sln --no-restore

    - name: üì¶ Install Node.js dependencies
      working-directory: tests
      run: npm ci

    - name: üé≠ Install Playwright browsers
      working-directory: tests
      run: npx playwright install --with-deps

    - name: üöÄ Start application in background
      run: |
        dotnet run --project TodoListApp.csproj &
        echo "APP_PID=$!" >> $GITHUB_ENV
      env:
        ASPNETCORE_ENVIRONMENT: Production
        ASPNETCORE_URLS: http://localhost:5146

    - name: ‚è≥ Wait for application to be ready
      run: |
        echo "üîç Checking application startup..."
        
        # Aguardar processo iniciar
        sleep 2
        
        # Health check otimizado com retry exponencial
        for attempt in {1..20}; do
          echo "Attempt $attempt: Checking health..."
          
          # Primeiro verificar se a porta est√° aberta (mais r√°pido)
          if nc -z localhost 5146 2>/dev/null; then
            echo "‚úÖ Port 5146 is open"
            
            # Ent√£o verificar se a API responde
            if curl -f -s --max-time 5 http://localhost:5146/api/todos > /dev/null; then
              echo "‚úÖ API is responding"
              
              # Verifica√ß√£o final: garantir que retorna JSON v√°lido
              if curl -f -s --max-time 5 http://localhost:5146/api/todos | jq . > /dev/null 2>&1; then
                echo "‚úÖ Application is ready and healthy!"
                break
              else
                echo "‚ö†Ô∏è  API responding but not returning valid JSON yet..."
              fi
            else
              echo "‚ö†Ô∏è  Port open but API not ready yet..."
            fi
          else
            echo "‚ö†Ô∏è  Port 5146 not ready yet..."
          fi
          
          # Retry com backoff exponencial
          if [ $attempt -lt 20 ]; then
            delay=$((attempt <= 5 ? 1 : attempt <= 10 ? 2 : 3))
            echo "üí§ Waiting ${delay}s before retry..."
            sleep $delay
          fi
        done
        
        # Verifica√ß√£o final
        if ! curl -f -s --max-time 10 http://localhost:5146/api/todos > /dev/null; then
          echo "‚ùå Application failed to start properly"
          echo "üîç Checking application logs..."
          # Tentar mostrar logs do processo se poss√≠vel
          if [ ! -z "$APP_PID" ] && kill -0 "$APP_PID" 2>/dev/null; then
            echo "üìä Application process is running (PID: $APP_PID)"
          else
            echo "‚ùå Application process is not running"
          fi
          exit 1
        fi

    - name: üß™ Run Playwright tests with Azure Playwright Workspaces
      working-directory: tests
      run: |
        echo "üîß Azure Playwright Workspaces Configuration:"
        echo "   Service URL: $PLAYWRIGHT_SERVICE_URL"
        echo "   Workers: $PLAYWRIGHT_WORKERS"
        echo "   Mode: Azure Workspaces"
        echo ""
        npx playwright test --config=playwright.service.config.ts --reporter=html
      env:
        CI: true
        PLAYWRIGHT_SERVICE_URL: ${{ secrets.PLAYWRIGHT_SERVICE_URL }}
        PLAYWRIGHT_WORKERS: 20
        PLAYWRIGHT_HTML_REPORT: playwright-report-azure

    - name: üõë Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

    - name: üìä Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: azure-playwright-report
        path: tests/playwright-report-azure/
        retention-days: 30

    - name: üì∏ Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: azure-playwright-screenshots
        path: tests/test-results/
        retention-days: 30

    - name: üìã Test Summary
      if: always()
      run: |
        echo "## üé≠ Azure Playwright Workspaces Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Execution Summary:" >> $GITHUB_STEP_SUMMARY
        echo "- Service: Azure Playwright Workspaces" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration: playwright.service.config.ts" >> $GITHUB_STEP_SUMMARY
        echo "- Workers: 20 (cloud-hosted)" >> $GITHUB_STEP_SUMMARY
        echo "- Browsers: Chromium, Firefox, WebKit, Mobile Chrome, Mobile Safari" >> $GITHUB_STEP_SUMMARY
        echo "- Timeout: 60 minutes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Available Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- üìä azure-playwright-report: Detailed HTML test report" >> $GITHUB_STEP_SUMMARY
        echo "- üì∏ azure-playwright-screenshots: Screenshots of any failures" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "### ‚úÖ Result: All tests passed successfully on Azure!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Result: Some tests failed - check artifacts for details" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Azure Playwright Workspaces Benefits:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ö° 20 parallel workers in the cloud" >> $GITHUB_STEP_SUMMARY
        echo "- üåê Cross-browser testing (5 browser configurations)" >> $GITHUB_STEP_SUMMARY
        echo "- üìà Scalable execution environment" >> $GITHUB_STEP_SUMMARY
        echo "- üîç Rich diagnostics and reporting" >> $GITHUB_STEP_SUMMARY